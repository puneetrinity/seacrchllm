# config/secrets.yml.example - Secret Configuration Template
# Copy this file to secrets.yml and fill in your actual values
# NEVER commit secrets.yml to version control!

# ================================
# DATABASE CONFIGURATION
# ================================
database:
  # Production database connection string
  url: "postgresql://username:password@host:port/database_name"
  
  # Database credentials (alternative to connection string)
  host: "your-db-host.com"
  port: 5432
  username: "langgraph_user"
  password: "your_secure_database_password"
  database: "langgraph_search"
  
  # SSL configuration for production
  sslmode: "require"
  sslcert: "/path/to/client-cert.pem"
  sslkey: "/path/to/client-key.pem"
  sslrootcert: "/path/to/ca-cert.pem"

# ================================
# REDIS CONFIGURATION
# ================================
redis:
  # Redis connection URL
  url: "redis://username:password@host:port/database"
  
  # Redis credentials (alternative to URL)
  host: "your-redis-host.com"
  port: 6379
  password: "your_redis_password"
  database: 0
  
  # Redis Cluster configuration (if using cluster)
  cluster:
    nodes:
      - host: "redis-node-1.com"
        port: 6379
      - host: "redis-node-2.com"
        port: 6379
      - host: "redis-node-3.com"
        port: 6379
    password: "cluster_password"

# ================================
# SEARCH ENGINE API KEYS
# ================================
search_engines:
  # Brave Search API
  brave:
    api_key: "your_brave_search_api_key_here"
    # Get your API key from: https://api.search.brave.com/
    
  # SerpAPI
  serpapi:
    api_key: "your_serpapi_key_here"
    # Get your API key from: https://serpapi.com/
    
  # ZenRows (for web scraping)
  zenrows:
    api_key: "your_zenrows_api_key_here"
    # Get your API key from: https://www.zenrows.com/

# ================================
# LLM SERVICE API KEYS
# ================================
llm_providers:
  # OpenAI API
  openai:
    api_key: "sk-your_openai_api_key_here"
    organization: "org-your_organization_id"  # Optional
    # Get your API key from: https://platform.openai.com/
    
  # Anthropic API
  anthropic:
    api_key: "sk-ant-your_anthropic_api_key_here"
    # Get your API key from: https://console.anthropic.com/
    
  # Ollama (if using remote instance)
  ollama:
    base_url: "http://your-ollama-host:11434"
    api_key: "your_ollama_api_key"  # If authentication enabled
    
  # Azure OpenAI (alternative to OpenAI)
  azure_openai:
    api_key: "your_azure_openai_key"
    endpoint: "https://your-resource.openai.azure.com/"
    api_version: "2023-12-01-preview"
    
  # Google PaLM API (if using)
  google_palm:
    api_key: "your_google_palm_api_key"
    
  # Cohere API (if using)
  cohere:
    api_key: "your_cohere_api_key"

# ================================
# JWT AND AUTHENTICATION
# ================================
authentication:
  # JWT Secret Key - MUST be a strong, random string
  jwt_secret_key: "your-super-secret-jwt-key-min-32-chars-long!"
  
  # JWT Algorithm (HS256, RS256, etc.)
  jwt_algorithm: "HS256"
  
  # OAuth providers (if implementing OAuth)
  oauth:
    google:
      client_id: "your_google_oauth_client_id"
      client_secret: "your_google_oauth_client_secret"
      
    github:
      client_id: "your_github_oauth_client_id"
      client_secret: "your_github_oauth_client_secret"
      
    microsoft:
      client_id: "your_microsoft_oauth_client_id"
      client_secret: "your_microsoft_oauth_client_secret"

# ================================
# CLOUD STORAGE CREDENTIALS
# ================================
storage:
  # AWS S3
  aws:
    access_key_id: "your_aws_access_key_id"
    secret_access_key: "your_aws_secret_access_key"
    region: "us-east-1"
    bucket: "your-s3-bucket-name"
    
  # Google Cloud Storage
  gcs:
    service_account_key: |
      {
        "type": "service_account",
        "project_id": "your-project-id",
        "private_key_id": "key-id",
        "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
        "client_email": "service-account@your-project.iam.gserviceaccount.com",
        "client_id": "client-id",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token"
      }
    bucket: "your-gcs-bucket-name"
    
  # Azure Blob Storage
  azure:
    connection_string: "DefaultEndpointsProtocol=https;AccountName=account;AccountKey=key;EndpointSuffix=core.windows.net"
    container: "your-container-name"

# ================================
# MONITORING AND OBSERVABILITY
# ================================
monitoring:
  # Prometheus Gateway
  prometheus:
    gateway_url: "http://prometheus-gateway:9091"
    username: "prometheus_user"  # If auth enabled
    password: "prometheus_password"
    
  # Grafana
  grafana:
    url: "http://grafana:3000"
    username: "admin"
    password: "your_grafana_password"
    
  # Elasticsearch (for logging)
  elasticsearch:
    hosts: ["https://elasticsearch:9200"]
    username: "elastic"
    password: "your_elasticsearch_password"
    api_key: "your_elasticsearch_api_key"  # Alternative to username/password
    
  # New Relic (if using)
  new_relic:
    license_key: "your_new_relic_license_key"
    
  # DataDog (if using)
  datadog:
    api_key: "your_datadog_api_key"
    app_key: "your_datadog_app_key"

# ================================
# NOTIFICATION SERVICES
# ================================
notifications:
  # Slack notifications
  slack:
    webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    bot_token: "xoxb-your-slack-bot-token"
    
  # Email configuration
  email:
    smtp_server: "smtp.gmail.com"
    smtp_port: 587
    username: "your_email@gmail.com"
    password: "your_email_password"
    use_tls: true
    
  # PagerDuty
  pagerduty:
    integration_key: "your_pagerduty_integration_key"
    
  # Twilio (for SMS)
  twilio:
    account_sid: "your_twilio_account_sid"
    auth_token: "your_twilio_auth_token"
    phone_number: "+1234567890"

# ================================
# EXTERNAL INTEGRATIONS
# ================================
external_integrations:
  # Webhook secrets for validating incoming webhooks
  webhooks:
    github_secret: "your_github_webhook_secret"
    stripe_secret: "your_stripe_webhook_secret"
    
  # Third-party APIs
  apis:
    newsapi:
      api_key: "your_news_api_key"
      
    youtube:
      api_key: "your_youtube_api_key"
      
    twitter:
      bearer_token: "your_twitter_bearer_token"
      api_key: "your_twitter_api_key"
      api_secret: "your_twitter_api_secret"

# ================================
# SECURITY AND COMPLIANCE
# ================================
security:
  # Encryption keys
  encryption:
    # Key for encrypting sensitive data at rest
    data_encryption_key: "your-32-char-data-encryption-key!!"
    
    # Key for encrypting audit logs
    audit_log_encryption_key: "your-32-char-audit-log-key!!!!!"
    
  # SSL/TLS Certificates
  ssl:
    # Production SSL certificate
    certificate: |
      -----BEGIN CERTIFICATE-----
      your_ssl_certificate_content_here
      -----END CERTIFICATE-----
      
    private_key: |
      -----BEGIN PRIVATE KEY-----
      your_ssl_private_key_content_here
      -----END PRIVATE KEY-----
      
    # Certificate Authority bundle
    ca_bundle: |
      -----BEGIN CERTIFICATE-----
      ca_certificate_content_here
      -----END CERTIFICATE-----
      
  # API keys for security scanning
  security_tools:
    # Snyk for vulnerability scanning
    snyk_token: "your_snyk_api_token"
    
    # OWASP ZAP for security testing
    zap_api_key: "your_zap_api_key"

# ================================
# COMPLIANCE AND AUDIT
# ================================
compliance:
  # GDPR compliance
  gdpr:
    dpo_email: "dpo@your-company.com"
    privacy_policy_url: "https://your-company.com/privacy"
    
  # SOC2 compliance
  soc2:
    auditor_contact: "auditor@your-audit-firm.com"
    compliance_officer: "compliance@your-company.com"
    
  # HIPAA compliance (if applicable)
  hipaa:
    covered_entity_id: "your_covered_entity_id"
    business_associate_agreement: "path/to/baa.pdf"

# ================================
# DEVELOPMENT AND TESTING
# ================================
development:
  # Seeding and test data
  test_data:
    admin_user_email: "admin@test.com"
    admin_user_password: "test_admin_password"
    
  # Mock service endpoints for testing
  mock_services:
    mock_llm_endpoint: "http://localhost:8080/mock-llm"
    mock_search_endpoint: "http://localhost:8080/mock-search"

# ================================
# KUBERNETES SECRETS (Base64 encoded)
# ================================
# These are examples of how secrets would be stored in Kubernetes
# kubectl create secret generic langgraph-secrets --from-file=secrets.yml
kubernetes_secrets:
  # Database URL (base64 encoded)
  database_url: "cG9zdGdyZXNxbDovL3VzZXI6cGFzc0Bsb2NhbGhvc3Q6NTQzMi9kYg=="
  
  # JWT Secret (base64 encoded)  
  jwt_secret: "bXktc3VwZXItc2VjcmV0LWp3dC1rZXk="
  
  # API Keys (base64 encoded)
  brave_api_key: "eW91cl9icmF2ZV9hcGlfa2V5"
  openai_api_key: "c2stZm9vYmFy"

# ================================
# ENVIRONMENT VARIABLE MAPPING
# ================================
# Map secret values to environment variables
environment_variables:
  # Database
  DATABASE_URL: "${database.url}"
  DB_HOST: "${database.host}"
  DB_PASSWORD: "${database.password}"
  
  # Redis
  REDIS_URL: "${redis.url}"
  REDIS_PASSWORD: "${redis.password}"
  
  # API Keys
  BRAVE_SEARCH_API_KEY: "${search_engines.brave.api_key}"
  SERPAPI_API_KEY: "${search_engines.serpapi.api_key}"
  ZENROWS_API_KEY: "${search_engines.zenrows.api_key}"
  OPENAI_API_KEY: "${llm_providers.openai.api_key}"
  ANTHROPIC_API_KEY: "${llm_providers.anthropic.api_key}"
  
  # Authentication
  JWT_SECRET_KEY: "${authentication.jwt_secret_key}"
  
  # Storage
  AWS_ACCESS_KEY_ID: "${storage.aws.access_key_id}"
  AWS_SECRET_ACCESS_KEY: "${storage.aws.secret_access_key}"
  
  # Monitoring
  ELASTICSEARCH_PASSWORD: "${monitoring.elasticsearch.password}"
  GRAFANA_PASSWORD: "${monitoring.grafana.password}"
  
  # Notifications
  SLACK_WEBHOOK_URL: "${notifications.slack.webhook_url}"
  SMTP_PASSWORD: "${notifications.email.password}"

# ================================
# NOTES AND SECURITY REMINDERS
# ================================
# 
# SECURITY CHECKLIST:
# 
# 1. Never commit this file with real secrets to version control
# 2. Use strong, unique passwords for all services
# 3. Rotate API keys and passwords regularly
# 4. Use environment variables or secret management systems in production
# 5. Enable 2FA on all external service accounts
# 6. Use least-privilege access for all API keys
# 7. Monitor for suspicious API usage
# 8. Keep audit logs of secret access and rotation
# 
# SECRET MANAGEMENT BEST PRACTICES:
# 
# 1. Use AWS Secrets Manager, Azure Key Vault, or HashiCorp Vault in production
# 2. Implement secret rotation policies
# 3. Use service accounts with minimal permissions
# 4. Encrypt secrets at rest and in transit
# 5. Implement proper secret lifecycle management
# 6. Use infrastructure as code for secret provisioning
# 7. Monitor and alert on secret access patterns
# 8. Implement break-glass procedures for emergency access
#
# GETTING API KEYS:
#
# - Brave Search: https://api.search.brave.com/
# - SerpAPI: https://serpapi.com/
# - ZenRows: https://www.zenrows.com/
# - OpenAI: https://platform.openai.com/
# - Anthropic: https://console.anthropic.com/
# - AWS: https://aws.amazon.com/iam/
# - Google Cloud: https://console.cloud.google.com/
# - Azure: https://portal.azure.com/
